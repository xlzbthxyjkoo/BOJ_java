import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static int N; //배열 크기
    static int number; //찾고싶은 위치
    static int[][] arr;

    static int [] dx = {1, 0, -1, 0}; //하, 우, 상, 좌
    static int [] dy = {0, 1, 0, -1};
    static int x = 0, y = 0, d = 0; //0,0(가장 큰 수)에서부터 아래로 내려가면서 -- 하면서 돌아가려고 함
    static int numberX = 0, numberY = 0; //출력해야하는 숫자의 좌표
    
    static StringBuilder sb = new StringBuilder();

    //출력
    static void print(int[][] graph) {
        for(int a = 0; a < graph.length; a++) {
            for(int b = 0; b < graph.length; b++) {
                if(number == arr[a][b]) {
                    numberX = a + 1;
                    numberY = b + 1;
                }
                sb.append(arr[a][b] + " ");
            }
            //한 행 다 출력하면 줄바꿈
            sb.append("\n");
        }
        //좌표 출력
        sb.append(numberX + " " + numberY);
        System.out.println(sb.toString());
    }

    public static void main(String[] args) throws IOException {
        N = Integer.parseInt(br.readLine());
        number = Integer.parseInt(br.readLine());
        arr = new int[N][N];

        for (int i = N * N; i > 0; i--) {
            arr[x][y] = i; //숫자 넣기

            //일단 좌표 계산 해봄, call 하지 않기 때문에 범위 넘어가더라도 에러 x
            int nx = x + dx[d];
            int ny = y + dy[d];

            //맵 범위 밖으로 나갔을 때나 전진하려고 하는 칸에 이미 값이 있는 경우 좌표 재지정
            if (nx < 0 || nx >= N || ny < 0 || ny >= N || arr[nx][ny] != 0) {
                d = (d+1) % 4; //방향 전환

                //방향 전환 후 좌표 재정의
                nx = x + dx[d];
                ny = y + dy[d];
            }
            x = nx;
            y = ny;
        }

        print(arr);
    }
}
